      db.Restaurants.insertMany([
...   {
...     "address": {
...       "building": "469",
...       "coord": [-73.961704, 40.662942],
...       "street": "Flatbush Avenue",
...       "zipcode": "11225"
...     },
...     "borough": "Brooklyn",
...     "cuisine": "Hamburgers",
...     "grades": [
...       { "date": { "$date": 1419897600000 }, "grade": "A", "score": 8 },
...       { "date": { "$date": 1404172800000 }, "grade": "B", "score": 23 },
...       { "date": { "$date": 1367280000000 }, "grade": "A", "score": 12 },
...       { "date": { "$date": 1336435200000 }, "grade": "A", "score": 12 }
...     ],
...     "name": "Wendy'S",
...     "restaurant_id": "30112340"
...   }


1. Write a MongoDB query to display all the documents in the collection restaurants.

te31424_db> db.Restaurants.find()
[
  {
    _id: ObjectId('68df491d4d2a0fe289ce5f47'),
    address: {
      building: '469',
      coord: [ -73.961704, 40.662942 ],
      street: 'Flatbush Avenue',
      zipcode: '11225'
    },
    borough: 'Brooklyn',
    cuisine: 'Hamburgers',
    grades: [
      { date: { '$date': 1419897600000 }, grade: 'A', score: 8 },
      { date: { '$date': 1404172800000 }, grade: 'B', score: 23 },
      { date: { '$date': 1367280000000 }, grade: 'A', score: 12 },
      { date: { '$date': 1336435200000 }, grade: 'A', score: 12 }
    ],
    name: "Wendy'S",
    restaurant_id: '30112340'
  }
]


2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

te31428_db> db.Restaurants.find({},{restaurant_id :1,name :1,borough:1,cuisine:1})
 

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant. 


te31428_db> db.Restaurants.find({},{restaurant_id :1,name :1,borough:1,cuisine:1,_id:0})


4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant. 


te31428_db> db.Restaurants.find({},{restaurant_id :1,name :1,borough:1,"address.zipcode":1,_id:0})


5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.


db.Restaurants.find({borough:{$eq:"Bronx"}})


6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.


db.Restaurants.find({borough:"Brooklyn"}).limit(5)

7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx. 

t31428_db> db.Restaurants.find({ borough: "Brooklyn" }).skip(3).limit(5)

8. Write a MongoDB query to find the restaurants who achieved a score more than 90. 

te31428_db> db.Restaurants.find({ "grades.score": { $gt:20 } })


9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100. 



te31428_db>  db.Restaurants.find({ "grades.0.score": { $gt:10,$lt:15}})




10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.


te31428_db> db.Restaurants.find({ "address.coord.0": { $lt:-74.00528899999999}})



11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
  
  
  
  te31428_db>   db.Restaurants.find({ cuisine: { $ne: "American" }, grades: { $gt: 30 }, "address.coord.0": { $lt: -10 } })



12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
    
    
  te31428_db>  db.Restaurants.find({ cuisine: { $ne: "American" }, grades: { $gt: 70 }, "address.coord.0": { $lt: -65.754168 } })



13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

te31428_db> db.restaurants.find({
  cuisine: { $ne: "American " },  borough: { $ne: "Brooklyn" }, grades: { $elemMatch: { grade: "A" } } }).sort({ cuisine: -1 })                    
  
  
  
  14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name. 
  
 te31428_db>  db.Restaurants.find({ name: /^Bru/},{ restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 })




15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.

db.Restaurants.find({name: /ces$/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});


16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name. 

te31428_db> db.Restaurants.find({"name":/.*ood.*/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})



17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish. 

db.Restaurants.find({ "borough": "Bronx" , $or : [{ "cuisine" : "American " },{ "cuisine" : "Chinese" }] } );



---------------------------------------------------------->Update query<--------------------------------------------------------

18.update name of any restaurant.

db.Restaurants.updateOne({ name: "The Movable Feast" }, { $set: { cuisine: "American" } })


19.update in address coord->coordinates.


db.Restaurants.updateMany({},{ $rename: { "address.coord": "address.coordinates" } })


20.cuisine->food_type
db.Restaurants.updateMany({},{ $rename: { "cuisine": "food_type" } })


--------------------------------------->deleting document from collection<-----------------------------------------------------------


db.Restaurants.deleteOne({"name":The Movable Feast})





